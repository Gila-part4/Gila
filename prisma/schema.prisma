generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id               String            @id @default(cuid())
  nickname         String            @default("user")
  email            String            @unique
  password         String
  emailVerified    DateTime?         @map("email_verified")
  image            String?
  tags             String[]
  accounts         Account[]
  sessions         Session[]
  activities       Activity[]
  reviews          Review[]
  favorites        Favorite[]
  questionRequests Question[]
  answers          Answer[]
  activityRequests ActivityRequest[]
  likes            Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id       String   @id @default(cuid())
  title    String
  content  String
  location String
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers  Answer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Answer {
  id         String   @id @default(cuid())
  content    String
  images     String[]
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activityId String
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  content    String?
  rating     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, activityId])
}

model Activity {
  id           String   @id @default(cuid())
  title        String
  description  String
  startDate    DateTime
  endDate      DateTime
  maximumCount Int
  thumbnails   String[]
  tags         String[]
  locations    String[]

  userId String
  user   User   @relation(fields: [userId], references: [id])

  likes            Like[]
  reviews          Review[]
  activityRequests ActivityRequest[]

  views Int @default(0)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  favorites Favorite[]
}

enum RequestStatus {
  PENDING
  APPROVE
  REJECT
}

model ActivityRequest {
  id            String        @id @default(cuid())
  requestUserId String
  requestUser   User          @relation(fields: [requestUserId], references: [id], onDelete: Cascade)
  activityId    String
  activity      Activity      @relation(fields: [activityId], references: [id], onDelete: Cascade)
  status        RequestStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([requestUserId, activityId])
}

model Like {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activityId String
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
